// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package webapi

import (
	"context"
	"sync"
	"time"
)

// ConfigStoreInterfaceMock is a mock implementation of ConfigStoreInterface.
//
//	func TestSomethingThatUsesConfigStoreInterface(t *testing.T) {
//
//		// make and configure a mocked ConfigStoreInterface
//		mockedConfigStoreInterface := &ConfigStoreInterfaceMock{
//			DeleteFunc: func(ctx context.Context) error {
//				panic("mock out the Delete method")
//			},
//			GetFunc: func(ctx context.Context) (string, error) {
//				panic("mock out the Get method")
//			},
//			GetObjectFunc: func(ctx context.Context, obj *Settings) error {
//				panic("mock out the GetObject method")
//			},
//			LastUpdatedFunc: func(ctx context.Context) (time.Time, error) {
//				panic("mock out the LastUpdated method")
//			},
//			SetFunc: func(ctx context.Context, data string) error {
//				panic("mock out the Set method")
//			},
//			SetObjectFunc: func(ctx context.Context, obj *Settings) error {
//				panic("mock out the SetObject method")
//			},
//		}
//
//		// use mockedConfigStoreInterface in code that requires ConfigStoreInterface
//		// and then make assertions.
//
//	}
type ConfigStoreInterfaceMock struct {
	// DeleteFunc mocks the Delete method.
	DeleteFunc func(ctx context.Context) error

	// GetFunc mocks the Get method.
	GetFunc func(ctx context.Context) (string, error)

	// GetObjectFunc mocks the GetObject method.
	GetObjectFunc func(ctx context.Context, obj *Settings) error

	// LastUpdatedFunc mocks the LastUpdated method.
	LastUpdatedFunc func(ctx context.Context) (time.Time, error)

	// SetFunc mocks the Set method.
	SetFunc func(ctx context.Context, data string) error

	// SetObjectFunc mocks the SetObject method.
	SetObjectFunc func(ctx context.Context, obj *Settings) error

	// calls tracks calls to the methods.
	calls struct {
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// GetObject holds details about calls to the GetObject method.
		GetObject []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Obj is the obj argument value.
			Obj *Settings
		}
		// LastUpdated holds details about calls to the LastUpdated method.
		LastUpdated []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// Set holds details about calls to the Set method.
		Set []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Data is the data argument value.
			Data string
		}
		// SetObject holds details about calls to the SetObject method.
		SetObject []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Obj is the obj argument value.
			Obj *Settings
		}
	}
	lockDelete      sync.RWMutex
	lockGet         sync.RWMutex
	lockGetObject   sync.RWMutex
	lockLastUpdated sync.RWMutex
	lockSet         sync.RWMutex
	lockSetObject   sync.RWMutex
}

// Delete calls DeleteFunc.
func (mock *ConfigStoreInterfaceMock) Delete(ctx context.Context) error {
	if mock.DeleteFunc == nil {
		panic("ConfigStoreInterfaceMock.DeleteFunc: method is nil but ConfigStoreInterface.Delete was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	mock.lockDelete.Unlock()
	return mock.DeleteFunc(ctx)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//
//	len(mockedConfigStoreInterface.DeleteCalls())
func (mock *ConfigStoreInterfaceMock) DeleteCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockDelete.RLock()
	calls = mock.calls.Delete
	mock.lockDelete.RUnlock()
	return calls
}

// ResetDeleteCalls reset all the calls that were made to Delete.
func (mock *ConfigStoreInterfaceMock) ResetDeleteCalls() {
	mock.lockDelete.Lock()
	mock.calls.Delete = nil
	mock.lockDelete.Unlock()
}

// Get calls GetFunc.
func (mock *ConfigStoreInterfaceMock) Get(ctx context.Context) (string, error) {
	if mock.GetFunc == nil {
		panic("ConfigStoreInterfaceMock.GetFunc: method is nil but ConfigStoreInterface.Get was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	mock.lockGet.Unlock()
	return mock.GetFunc(ctx)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//
//	len(mockedConfigStoreInterface.GetCalls())
func (mock *ConfigStoreInterfaceMock) GetCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockGet.RLock()
	calls = mock.calls.Get
	mock.lockGet.RUnlock()
	return calls
}

// ResetGetCalls reset all the calls that were made to Get.
func (mock *ConfigStoreInterfaceMock) ResetGetCalls() {
	mock.lockGet.Lock()
	mock.calls.Get = nil
	mock.lockGet.Unlock()
}

// GetObject calls GetObjectFunc.
func (mock *ConfigStoreInterfaceMock) GetObject(ctx context.Context, obj *Settings) error {
	if mock.GetObjectFunc == nil {
		panic("ConfigStoreInterfaceMock.GetObjectFunc: method is nil but ConfigStoreInterface.GetObject was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Obj *Settings
	}{
		Ctx: ctx,
		Obj: obj,
	}
	mock.lockGetObject.Lock()
	mock.calls.GetObject = append(mock.calls.GetObject, callInfo)
	mock.lockGetObject.Unlock()
	return mock.GetObjectFunc(ctx, obj)
}

// GetObjectCalls gets all the calls that were made to GetObject.
// Check the length with:
//
//	len(mockedConfigStoreInterface.GetObjectCalls())
func (mock *ConfigStoreInterfaceMock) GetObjectCalls() []struct {
	Ctx context.Context
	Obj *Settings
} {
	var calls []struct {
		Ctx context.Context
		Obj *Settings
	}
	mock.lockGetObject.RLock()
	calls = mock.calls.GetObject
	mock.lockGetObject.RUnlock()
	return calls
}

// ResetGetObjectCalls reset all the calls that were made to GetObject.
func (mock *ConfigStoreInterfaceMock) ResetGetObjectCalls() {
	mock.lockGetObject.Lock()
	mock.calls.GetObject = nil
	mock.lockGetObject.Unlock()
}

// LastUpdated calls LastUpdatedFunc.
func (mock *ConfigStoreInterfaceMock) LastUpdated(ctx context.Context) (time.Time, error) {
	if mock.LastUpdatedFunc == nil {
		panic("ConfigStoreInterfaceMock.LastUpdatedFunc: method is nil but ConfigStoreInterface.LastUpdated was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockLastUpdated.Lock()
	mock.calls.LastUpdated = append(mock.calls.LastUpdated, callInfo)
	mock.lockLastUpdated.Unlock()
	return mock.LastUpdatedFunc(ctx)
}

// LastUpdatedCalls gets all the calls that were made to LastUpdated.
// Check the length with:
//
//	len(mockedConfigStoreInterface.LastUpdatedCalls())
func (mock *ConfigStoreInterfaceMock) LastUpdatedCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockLastUpdated.RLock()
	calls = mock.calls.LastUpdated
	mock.lockLastUpdated.RUnlock()
	return calls
}

// ResetLastUpdatedCalls reset all the calls that were made to LastUpdated.
func (mock *ConfigStoreInterfaceMock) ResetLastUpdatedCalls() {
	mock.lockLastUpdated.Lock()
	mock.calls.LastUpdated = nil
	mock.lockLastUpdated.Unlock()
}

// Set calls SetFunc.
func (mock *ConfigStoreInterfaceMock) Set(ctx context.Context, data string) error {
	if mock.SetFunc == nil {
		panic("ConfigStoreInterfaceMock.SetFunc: method is nil but ConfigStoreInterface.Set was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Data string
	}{
		Ctx:  ctx,
		Data: data,
	}
	mock.lockSet.Lock()
	mock.calls.Set = append(mock.calls.Set, callInfo)
	mock.lockSet.Unlock()
	return mock.SetFunc(ctx, data)
}

// SetCalls gets all the calls that were made to Set.
// Check the length with:
//
//	len(mockedConfigStoreInterface.SetCalls())
func (mock *ConfigStoreInterfaceMock) SetCalls() []struct {
	Ctx  context.Context
	Data string
} {
	var calls []struct {
		Ctx  context.Context
		Data string
	}
	mock.lockSet.RLock()
	calls = mock.calls.Set
	mock.lockSet.RUnlock()
	return calls
}

// ResetSetCalls reset all the calls that were made to Set.
func (mock *ConfigStoreInterfaceMock) ResetSetCalls() {
	mock.lockSet.Lock()
	mock.calls.Set = nil
	mock.lockSet.Unlock()
}

// SetObject calls SetObjectFunc.
func (mock *ConfigStoreInterfaceMock) SetObject(ctx context.Context, obj *Settings) error {
	if mock.SetObjectFunc == nil {
		panic("ConfigStoreInterfaceMock.SetObjectFunc: method is nil but ConfigStoreInterface.SetObject was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Obj *Settings
	}{
		Ctx: ctx,
		Obj: obj,
	}
	mock.lockSetObject.Lock()
	mock.calls.SetObject = append(mock.calls.SetObject, callInfo)
	mock.lockSetObject.Unlock()
	return mock.SetObjectFunc(ctx, obj)
}

// SetObjectCalls gets all the calls that were made to SetObject.
// Check the length with:
//
//	len(mockedConfigStoreInterface.SetObjectCalls())
func (mock *ConfigStoreInterfaceMock) SetObjectCalls() []struct {
	Ctx context.Context
	Obj *Settings
} {
	var calls []struct {
		Ctx context.Context
		Obj *Settings
	}
	mock.lockSetObject.RLock()
	calls = mock.calls.SetObject
	mock.lockSetObject.RUnlock()
	return calls
}

// ResetSetObjectCalls reset all the calls that were made to SetObject.
func (mock *ConfigStoreInterfaceMock) ResetSetObjectCalls() {
	mock.lockSetObject.Lock()
	mock.calls.SetObject = nil
	mock.lockSetObject.Unlock()
}

// ResetCalls reset all the calls that were made to all mocked methods.
func (mock *ConfigStoreInterfaceMock) ResetCalls() {
	mock.lockDelete.Lock()
	mock.calls.Delete = nil
	mock.lockDelete.Unlock()

	mock.lockGet.Lock()
	mock.calls.Get = nil
	mock.lockGet.Unlock()

	mock.lockGetObject.Lock()
	mock.calls.GetObject = nil
	mock.lockGetObject.Unlock()

	mock.lockLastUpdated.Lock()
	mock.calls.LastUpdated = nil
	mock.lockLastUpdated.Unlock()

	mock.lockSet.Lock()
	mock.calls.Set = nil
	mock.lockSet.Unlock()

	mock.lockSetObject.Lock()
	mock.calls.SetObject = nil
	mock.lockSetObject.Unlock()
}
