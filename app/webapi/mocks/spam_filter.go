// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"sync"
)

// SpamFilterMock is a mock implementation of webapi.SpamFilter.
//
//	func TestSomethingThatUsesSpamFilter(t *testing.T) {
//
//		// make and configure a mocked webapi.SpamFilter
//		mockedSpamFilter := &SpamFilterMock{
//			DynamicSamplesFunc: func() ([]string, []string, error) {
//				panic("mock out the DynamicSamples method")
//			},
//			ReloadSamplesFunc: func() error {
//				panic("mock out the ReloadSamples method")
//			},
//			RemoveDynamicHamSampleFunc: func(sample string) error {
//				panic("mock out the RemoveDynamicHamSample method")
//			},
//			RemoveDynamicSpamSampleFunc: func(sample string) error {
//				panic("mock out the RemoveDynamicSpamSample method")
//			},
//			UpdateHamFunc: func(msg string) error {
//				panic("mock out the UpdateHam method")
//			},
//			UpdateSpamFunc: func(msg string) error {
//				panic("mock out the UpdateSpam method")
//			},
//		}
//
//		// use mockedSpamFilter in code that requires webapi.SpamFilter
//		// and then make assertions.
//
//	}
type SpamFilterMock struct {
	// DynamicSamplesFunc mocks the DynamicSamples method.
	DynamicSamplesFunc func() ([]string, []string, error)

	// ReloadSamplesFunc mocks the ReloadSamples method.
	ReloadSamplesFunc func() error

	// RemoveDynamicHamSampleFunc mocks the RemoveDynamicHamSample method.
	RemoveDynamicHamSampleFunc func(sample string) error

	// RemoveDynamicSpamSampleFunc mocks the RemoveDynamicSpamSample method.
	RemoveDynamicSpamSampleFunc func(sample string) error

	// UpdateHamFunc mocks the UpdateHam method.
	UpdateHamFunc func(msg string) error

	// UpdateSpamFunc mocks the UpdateSpam method.
	UpdateSpamFunc func(msg string) error

	// calls tracks calls to the methods.
	calls struct {
		// DynamicSamples holds details about calls to the DynamicSamples method.
		DynamicSamples []struct {
		}
		// ReloadSamples holds details about calls to the ReloadSamples method.
		ReloadSamples []struct {
		}
		// RemoveDynamicHamSample holds details about calls to the RemoveDynamicHamSample method.
		RemoveDynamicHamSample []struct {
			// Sample is the sample argument value.
			Sample string
		}
		// RemoveDynamicSpamSample holds details about calls to the RemoveDynamicSpamSample method.
		RemoveDynamicSpamSample []struct {
			// Sample is the sample argument value.
			Sample string
		}
		// UpdateHam holds details about calls to the UpdateHam method.
		UpdateHam []struct {
			// Msg is the msg argument value.
			Msg string
		}
		// UpdateSpam holds details about calls to the UpdateSpam method.
		UpdateSpam []struct {
			// Msg is the msg argument value.
			Msg string
		}
	}
	lockDynamicSamples          sync.RWMutex
	lockReloadSamples           sync.RWMutex
	lockRemoveDynamicHamSample  sync.RWMutex
	lockRemoveDynamicSpamSample sync.RWMutex
	lockUpdateHam               sync.RWMutex
	lockUpdateSpam              sync.RWMutex
}

// DynamicSamples calls DynamicSamplesFunc.
func (mock *SpamFilterMock) DynamicSamples() ([]string, []string, error) {
	if mock.DynamicSamplesFunc == nil {
		panic("SpamFilterMock.DynamicSamplesFunc: method is nil but SpamFilter.DynamicSamples was just called")
	}
	callInfo := struct {
	}{}
	mock.lockDynamicSamples.Lock()
	mock.calls.DynamicSamples = append(mock.calls.DynamicSamples, callInfo)
	mock.lockDynamicSamples.Unlock()
	return mock.DynamicSamplesFunc()
}

// DynamicSamplesCalls gets all the calls that were made to DynamicSamples.
// Check the length with:
//
//	len(mockedSpamFilter.DynamicSamplesCalls())
func (mock *SpamFilterMock) DynamicSamplesCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockDynamicSamples.RLock()
	calls = mock.calls.DynamicSamples
	mock.lockDynamicSamples.RUnlock()
	return calls
}

// ResetDynamicSamplesCalls reset all the calls that were made to DynamicSamples.
func (mock *SpamFilterMock) ResetDynamicSamplesCalls() {
	mock.lockDynamicSamples.Lock()
	mock.calls.DynamicSamples = nil
	mock.lockDynamicSamples.Unlock()
}

// ReloadSamples calls ReloadSamplesFunc.
func (mock *SpamFilterMock) ReloadSamples() error {
	if mock.ReloadSamplesFunc == nil {
		panic("SpamFilterMock.ReloadSamplesFunc: method is nil but SpamFilter.ReloadSamples was just called")
	}
	callInfo := struct {
	}{}
	mock.lockReloadSamples.Lock()
	mock.calls.ReloadSamples = append(mock.calls.ReloadSamples, callInfo)
	mock.lockReloadSamples.Unlock()
	return mock.ReloadSamplesFunc()
}

// ReloadSamplesCalls gets all the calls that were made to ReloadSamples.
// Check the length with:
//
//	len(mockedSpamFilter.ReloadSamplesCalls())
func (mock *SpamFilterMock) ReloadSamplesCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockReloadSamples.RLock()
	calls = mock.calls.ReloadSamples
	mock.lockReloadSamples.RUnlock()
	return calls
}

// ResetReloadSamplesCalls reset all the calls that were made to ReloadSamples.
func (mock *SpamFilterMock) ResetReloadSamplesCalls() {
	mock.lockReloadSamples.Lock()
	mock.calls.ReloadSamples = nil
	mock.lockReloadSamples.Unlock()
}

// RemoveDynamicHamSample calls RemoveDynamicHamSampleFunc.
func (mock *SpamFilterMock) RemoveDynamicHamSample(sample string) error {
	if mock.RemoveDynamicHamSampleFunc == nil {
		panic("SpamFilterMock.RemoveDynamicHamSampleFunc: method is nil but SpamFilter.RemoveDynamicHamSample was just called")
	}
	callInfo := struct {
		Sample string
	}{
		Sample: sample,
	}
	mock.lockRemoveDynamicHamSample.Lock()
	mock.calls.RemoveDynamicHamSample = append(mock.calls.RemoveDynamicHamSample, callInfo)
	mock.lockRemoveDynamicHamSample.Unlock()
	return mock.RemoveDynamicHamSampleFunc(sample)
}

// RemoveDynamicHamSampleCalls gets all the calls that were made to RemoveDynamicHamSample.
// Check the length with:
//
//	len(mockedSpamFilter.RemoveDynamicHamSampleCalls())
func (mock *SpamFilterMock) RemoveDynamicHamSampleCalls() []struct {
	Sample string
} {
	var calls []struct {
		Sample string
	}
	mock.lockRemoveDynamicHamSample.RLock()
	calls = mock.calls.RemoveDynamicHamSample
	mock.lockRemoveDynamicHamSample.RUnlock()
	return calls
}

// ResetRemoveDynamicHamSampleCalls reset all the calls that were made to RemoveDynamicHamSample.
func (mock *SpamFilterMock) ResetRemoveDynamicHamSampleCalls() {
	mock.lockRemoveDynamicHamSample.Lock()
	mock.calls.RemoveDynamicHamSample = nil
	mock.lockRemoveDynamicHamSample.Unlock()
}

// RemoveDynamicSpamSample calls RemoveDynamicSpamSampleFunc.
func (mock *SpamFilterMock) RemoveDynamicSpamSample(sample string) error {
	if mock.RemoveDynamicSpamSampleFunc == nil {
		panic("SpamFilterMock.RemoveDynamicSpamSampleFunc: method is nil but SpamFilter.RemoveDynamicSpamSample was just called")
	}
	callInfo := struct {
		Sample string
	}{
		Sample: sample,
	}
	mock.lockRemoveDynamicSpamSample.Lock()
	mock.calls.RemoveDynamicSpamSample = append(mock.calls.RemoveDynamicSpamSample, callInfo)
	mock.lockRemoveDynamicSpamSample.Unlock()
	return mock.RemoveDynamicSpamSampleFunc(sample)
}

// RemoveDynamicSpamSampleCalls gets all the calls that were made to RemoveDynamicSpamSample.
// Check the length with:
//
//	len(mockedSpamFilter.RemoveDynamicSpamSampleCalls())
func (mock *SpamFilterMock) RemoveDynamicSpamSampleCalls() []struct {
	Sample string
} {
	var calls []struct {
		Sample string
	}
	mock.lockRemoveDynamicSpamSample.RLock()
	calls = mock.calls.RemoveDynamicSpamSample
	mock.lockRemoveDynamicSpamSample.RUnlock()
	return calls
}

// ResetRemoveDynamicSpamSampleCalls reset all the calls that were made to RemoveDynamicSpamSample.
func (mock *SpamFilterMock) ResetRemoveDynamicSpamSampleCalls() {
	mock.lockRemoveDynamicSpamSample.Lock()
	mock.calls.RemoveDynamicSpamSample = nil
	mock.lockRemoveDynamicSpamSample.Unlock()
}

// UpdateHam calls UpdateHamFunc.
func (mock *SpamFilterMock) UpdateHam(msg string) error {
	if mock.UpdateHamFunc == nil {
		panic("SpamFilterMock.UpdateHamFunc: method is nil but SpamFilter.UpdateHam was just called")
	}
	callInfo := struct {
		Msg string
	}{
		Msg: msg,
	}
	mock.lockUpdateHam.Lock()
	mock.calls.UpdateHam = append(mock.calls.UpdateHam, callInfo)
	mock.lockUpdateHam.Unlock()
	return mock.UpdateHamFunc(msg)
}

// UpdateHamCalls gets all the calls that were made to UpdateHam.
// Check the length with:
//
//	len(mockedSpamFilter.UpdateHamCalls())
func (mock *SpamFilterMock) UpdateHamCalls() []struct {
	Msg string
} {
	var calls []struct {
		Msg string
	}
	mock.lockUpdateHam.RLock()
	calls = mock.calls.UpdateHam
	mock.lockUpdateHam.RUnlock()
	return calls
}

// ResetUpdateHamCalls reset all the calls that were made to UpdateHam.
func (mock *SpamFilterMock) ResetUpdateHamCalls() {
	mock.lockUpdateHam.Lock()
	mock.calls.UpdateHam = nil
	mock.lockUpdateHam.Unlock()
}

// UpdateSpam calls UpdateSpamFunc.
func (mock *SpamFilterMock) UpdateSpam(msg string) error {
	if mock.UpdateSpamFunc == nil {
		panic("SpamFilterMock.UpdateSpamFunc: method is nil but SpamFilter.UpdateSpam was just called")
	}
	callInfo := struct {
		Msg string
	}{
		Msg: msg,
	}
	mock.lockUpdateSpam.Lock()
	mock.calls.UpdateSpam = append(mock.calls.UpdateSpam, callInfo)
	mock.lockUpdateSpam.Unlock()
	return mock.UpdateSpamFunc(msg)
}

// UpdateSpamCalls gets all the calls that were made to UpdateSpam.
// Check the length with:
//
//	len(mockedSpamFilter.UpdateSpamCalls())
func (mock *SpamFilterMock) UpdateSpamCalls() []struct {
	Msg string
} {
	var calls []struct {
		Msg string
	}
	mock.lockUpdateSpam.RLock()
	calls = mock.calls.UpdateSpam
	mock.lockUpdateSpam.RUnlock()
	return calls
}

// ResetUpdateSpamCalls reset all the calls that were made to UpdateSpam.
func (mock *SpamFilterMock) ResetUpdateSpamCalls() {
	mock.lockUpdateSpam.Lock()
	mock.calls.UpdateSpam = nil
	mock.lockUpdateSpam.Unlock()
}

// ResetCalls reset all the calls that were made to all mocked methods.
func (mock *SpamFilterMock) ResetCalls() {
	mock.lockDynamicSamples.Lock()
	mock.calls.DynamicSamples = nil
	mock.lockDynamicSamples.Unlock()

	mock.lockReloadSamples.Lock()
	mock.calls.ReloadSamples = nil
	mock.lockReloadSamples.Unlock()

	mock.lockRemoveDynamicHamSample.Lock()
	mock.calls.RemoveDynamicHamSample = nil
	mock.lockRemoveDynamicHamSample.Unlock()

	mock.lockRemoveDynamicSpamSample.Lock()
	mock.calls.RemoveDynamicSpamSample = nil
	mock.lockRemoveDynamicSpamSample.Unlock()

	mock.lockUpdateHam.Lock()
	mock.calls.UpdateHam = nil
	mock.lockUpdateHam.Unlock()

	mock.lockUpdateSpam.Lock()
	mock.calls.UpdateSpam = nil
	mock.lockUpdateSpam.Unlock()
}
