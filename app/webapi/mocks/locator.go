// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"sync"
)

// LocatorMock is a mock implementation of webapi.Locator.
//
//	func TestSomethingThatUsesLocator(t *testing.T) {
//
//		// make and configure a mocked webapi.Locator
//		mockedLocator := &LocatorMock{
//			UserIDByNameFunc: func(ctx context.Context, userName string) int64 {
//				panic("mock out the UserIDByName method")
//			},
//			UserNameByIDFunc: func(ctx context.Context, userID int64) string {
//				panic("mock out the UserNameByID method")
//			},
//		}
//
//		// use mockedLocator in code that requires webapi.Locator
//		// and then make assertions.
//
//	}
type LocatorMock struct {
	// UserIDByNameFunc mocks the UserIDByName method.
	UserIDByNameFunc func(ctx context.Context, userName string) int64

	// UserNameByIDFunc mocks the UserNameByID method.
	UserNameByIDFunc func(ctx context.Context, userID int64) string

	// calls tracks calls to the methods.
	calls struct {
		// UserIDByName holds details about calls to the UserIDByName method.
		UserIDByName []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// UserName is the userName argument value.
			UserName string
		}
		// UserNameByID holds details about calls to the UserNameByID method.
		UserNameByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// UserID is the userID argument value.
			UserID int64
		}
	}
	lockUserIDByName sync.RWMutex
	lockUserNameByID sync.RWMutex
}

// UserIDByName calls UserIDByNameFunc.
func (mock *LocatorMock) UserIDByName(ctx context.Context, userName string) int64 {
	if mock.UserIDByNameFunc == nil {
		panic("LocatorMock.UserIDByNameFunc: method is nil but Locator.UserIDByName was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		UserName string
	}{
		Ctx:      ctx,
		UserName: userName,
	}
	mock.lockUserIDByName.Lock()
	mock.calls.UserIDByName = append(mock.calls.UserIDByName, callInfo)
	mock.lockUserIDByName.Unlock()
	return mock.UserIDByNameFunc(ctx, userName)
}

// UserIDByNameCalls gets all the calls that were made to UserIDByName.
// Check the length with:
//
//	len(mockedLocator.UserIDByNameCalls())
func (mock *LocatorMock) UserIDByNameCalls() []struct {
	Ctx      context.Context
	UserName string
} {
	var calls []struct {
		Ctx      context.Context
		UserName string
	}
	mock.lockUserIDByName.RLock()
	calls = mock.calls.UserIDByName
	mock.lockUserIDByName.RUnlock()
	return calls
}

// ResetUserIDByNameCalls reset all the calls that were made to UserIDByName.
func (mock *LocatorMock) ResetUserIDByNameCalls() {
	mock.lockUserIDByName.Lock()
	mock.calls.UserIDByName = nil
	mock.lockUserIDByName.Unlock()
}

// UserNameByID calls UserNameByIDFunc.
func (mock *LocatorMock) UserNameByID(ctx context.Context, userID int64) string {
	if mock.UserNameByIDFunc == nil {
		panic("LocatorMock.UserNameByIDFunc: method is nil but Locator.UserNameByID was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		UserID int64
	}{
		Ctx:    ctx,
		UserID: userID,
	}
	mock.lockUserNameByID.Lock()
	mock.calls.UserNameByID = append(mock.calls.UserNameByID, callInfo)
	mock.lockUserNameByID.Unlock()
	return mock.UserNameByIDFunc(ctx, userID)
}

// UserNameByIDCalls gets all the calls that were made to UserNameByID.
// Check the length with:
//
//	len(mockedLocator.UserNameByIDCalls())
func (mock *LocatorMock) UserNameByIDCalls() []struct {
	Ctx    context.Context
	UserID int64
} {
	var calls []struct {
		Ctx    context.Context
		UserID int64
	}
	mock.lockUserNameByID.RLock()
	calls = mock.calls.UserNameByID
	mock.lockUserNameByID.RUnlock()
	return calls
}

// ResetUserNameByIDCalls reset all the calls that were made to UserNameByID.
func (mock *LocatorMock) ResetUserNameByIDCalls() {
	mock.lockUserNameByID.Lock()
	mock.calls.UserNameByID = nil
	mock.lockUserNameByID.Unlock()
}

// ResetCalls reset all the calls that were made to all mocked methods.
func (mock *LocatorMock) ResetCalls() {
	mock.lockUserIDByName.Lock()
	mock.calls.UserIDByName = nil
	mock.lockUserIDByName.Unlock()

	mock.lockUserNameByID.Lock()
	mock.calls.UserNameByID = nil
	mock.lockUserNameByID.Unlock()
}
