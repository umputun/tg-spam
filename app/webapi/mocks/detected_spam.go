// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"github.com/umputun/tg-spam/app/storage"
	"sync"
)

// DetectedSpamMock is a mock implementation of webapi.DetectedSpam.
//
//	func TestSomethingThatUsesDetectedSpam(t *testing.T) {
//
//		// make and configure a mocked webapi.DetectedSpam
//		mockedDetectedSpam := &DetectedSpamMock{
//			FindByUserIDFunc: func(ctx context.Context, userID int64) (*storage.DetectedSpamInfo, error) {
//				panic("mock out the FindByUserID method")
//			},
//			ReadFunc: func(ctx context.Context) ([]storage.DetectedSpamInfo, error) {
//				panic("mock out the Read method")
//			},
//			SetAddedToSamplesFlagFunc: func(ctx context.Context, id int64) error {
//				panic("mock out the SetAddedToSamplesFlag method")
//			},
//		}
//
//		// use mockedDetectedSpam in code that requires webapi.DetectedSpam
//		// and then make assertions.
//
//	}
type DetectedSpamMock struct {
	// FindByUserIDFunc mocks the FindByUserID method.
	FindByUserIDFunc func(ctx context.Context, userID int64) (*storage.DetectedSpamInfo, error)

	// ReadFunc mocks the Read method.
	ReadFunc func(ctx context.Context) ([]storage.DetectedSpamInfo, error)

	// SetAddedToSamplesFlagFunc mocks the SetAddedToSamplesFlag method.
	SetAddedToSamplesFlagFunc func(ctx context.Context, id int64) error

	// calls tracks calls to the methods.
	calls struct {
		// FindByUserID holds details about calls to the FindByUserID method.
		FindByUserID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// UserID is the userID argument value.
			UserID int64
		}
		// Read holds details about calls to the Read method.
		Read []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// SetAddedToSamplesFlag holds details about calls to the SetAddedToSamplesFlag method.
		SetAddedToSamplesFlag []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID int64
		}
	}
	lockFindByUserID          sync.RWMutex
	lockRead                  sync.RWMutex
	lockSetAddedToSamplesFlag sync.RWMutex
}

// FindByUserID calls FindByUserIDFunc.
func (mock *DetectedSpamMock) FindByUserID(ctx context.Context, userID int64) (*storage.DetectedSpamInfo, error) {
	if mock.FindByUserIDFunc == nil {
		panic("DetectedSpamMock.FindByUserIDFunc: method is nil but DetectedSpam.FindByUserID was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		UserID int64
	}{
		Ctx:    ctx,
		UserID: userID,
	}
	mock.lockFindByUserID.Lock()
	mock.calls.FindByUserID = append(mock.calls.FindByUserID, callInfo)
	mock.lockFindByUserID.Unlock()
	return mock.FindByUserIDFunc(ctx, userID)
}

// FindByUserIDCalls gets all the calls that were made to FindByUserID.
// Check the length with:
//
//	len(mockedDetectedSpam.FindByUserIDCalls())
func (mock *DetectedSpamMock) FindByUserIDCalls() []struct {
	Ctx    context.Context
	UserID int64
} {
	var calls []struct {
		Ctx    context.Context
		UserID int64
	}
	mock.lockFindByUserID.RLock()
	calls = mock.calls.FindByUserID
	mock.lockFindByUserID.RUnlock()
	return calls
}

// ResetFindByUserIDCalls reset all the calls that were made to FindByUserID.
func (mock *DetectedSpamMock) ResetFindByUserIDCalls() {
	mock.lockFindByUserID.Lock()
	mock.calls.FindByUserID = nil
	mock.lockFindByUserID.Unlock()
}

// Read calls ReadFunc.
func (mock *DetectedSpamMock) Read(ctx context.Context) ([]storage.DetectedSpamInfo, error) {
	if mock.ReadFunc == nil {
		panic("DetectedSpamMock.ReadFunc: method is nil but DetectedSpam.Read was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockRead.Lock()
	mock.calls.Read = append(mock.calls.Read, callInfo)
	mock.lockRead.Unlock()
	return mock.ReadFunc(ctx)
}

// ReadCalls gets all the calls that were made to Read.
// Check the length with:
//
//	len(mockedDetectedSpam.ReadCalls())
func (mock *DetectedSpamMock) ReadCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockRead.RLock()
	calls = mock.calls.Read
	mock.lockRead.RUnlock()
	return calls
}

// ResetReadCalls reset all the calls that were made to Read.
func (mock *DetectedSpamMock) ResetReadCalls() {
	mock.lockRead.Lock()
	mock.calls.Read = nil
	mock.lockRead.Unlock()
}

// SetAddedToSamplesFlag calls SetAddedToSamplesFlagFunc.
func (mock *DetectedSpamMock) SetAddedToSamplesFlag(ctx context.Context, id int64) error {
	if mock.SetAddedToSamplesFlagFunc == nil {
		panic("DetectedSpamMock.SetAddedToSamplesFlagFunc: method is nil but DetectedSpam.SetAddedToSamplesFlag was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  int64
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockSetAddedToSamplesFlag.Lock()
	mock.calls.SetAddedToSamplesFlag = append(mock.calls.SetAddedToSamplesFlag, callInfo)
	mock.lockSetAddedToSamplesFlag.Unlock()
	return mock.SetAddedToSamplesFlagFunc(ctx, id)
}

// SetAddedToSamplesFlagCalls gets all the calls that were made to SetAddedToSamplesFlag.
// Check the length with:
//
//	len(mockedDetectedSpam.SetAddedToSamplesFlagCalls())
func (mock *DetectedSpamMock) SetAddedToSamplesFlagCalls() []struct {
	Ctx context.Context
	ID  int64
} {
	var calls []struct {
		Ctx context.Context
		ID  int64
	}
	mock.lockSetAddedToSamplesFlag.RLock()
	calls = mock.calls.SetAddedToSamplesFlag
	mock.lockSetAddedToSamplesFlag.RUnlock()
	return calls
}

// ResetSetAddedToSamplesFlagCalls reset all the calls that were made to SetAddedToSamplesFlag.
func (mock *DetectedSpamMock) ResetSetAddedToSamplesFlagCalls() {
	mock.lockSetAddedToSamplesFlag.Lock()
	mock.calls.SetAddedToSamplesFlag = nil
	mock.lockSetAddedToSamplesFlag.Unlock()
}

// ResetCalls reset all the calls that were made to all mocked methods.
func (mock *DetectedSpamMock) ResetCalls() {
	mock.lockFindByUserID.Lock()
	mock.calls.FindByUserID = nil
	mock.lockFindByUserID.Unlock()

	mock.lockRead.Lock()
	mock.calls.Read = nil
	mock.lockRead.Unlock()

	mock.lockSetAddedToSamplesFlag.Lock()
	mock.calls.SetAddedToSamplesFlag = nil
	mock.lockSetAddedToSamplesFlag.Unlock()
}
