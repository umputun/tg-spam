// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"github.com/umputun/tg-spam/app/storage"
	"sync"
)

// DictionaryMock is a mock implementation of webapi.Dictionary.
//
//	func TestSomethingThatUsesDictionary(t *testing.T) {
//
//		// make and configure a mocked webapi.Dictionary
//		mockedDictionary := &DictionaryMock{
//			AddFunc: func(ctx context.Context, t storage.DictionaryType, data string) error {
//				panic("mock out the Add method")
//			},
//			DeleteFunc: func(ctx context.Context, id int64) error {
//				panic("mock out the Delete method")
//			},
//			ReadFunc: func(ctx context.Context, t storage.DictionaryType) ([]string, error) {
//				panic("mock out the Read method")
//			},
//			ReadWithIDsFunc: func(ctx context.Context, t storage.DictionaryType) ([]storage.DictionaryEntry, error) {
//				panic("mock out the ReadWithIDs method")
//			},
//			StatsFunc: func(ctx context.Context) (*storage.DictionaryStats, error) {
//				panic("mock out the Stats method")
//			},
//		}
//
//		// use mockedDictionary in code that requires webapi.Dictionary
//		// and then make assertions.
//
//	}
type DictionaryMock struct {
	// AddFunc mocks the Add method.
	AddFunc func(ctx context.Context, t storage.DictionaryType, data string) error

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(ctx context.Context, id int64) error

	// ReadFunc mocks the Read method.
	ReadFunc func(ctx context.Context, t storage.DictionaryType) ([]string, error)

	// ReadWithIDsFunc mocks the ReadWithIDs method.
	ReadWithIDsFunc func(ctx context.Context, t storage.DictionaryType) ([]storage.DictionaryEntry, error)

	// StatsFunc mocks the Stats method.
	StatsFunc func(ctx context.Context) (*storage.DictionaryStats, error)

	// calls tracks calls to the methods.
	calls struct {
		// Add holds details about calls to the Add method.
		Add []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// T is the t argument value.
			T storage.DictionaryType
			// Data is the data argument value.
			Data string
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID int64
		}
		// Read holds details about calls to the Read method.
		Read []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// T is the t argument value.
			T storage.DictionaryType
		}
		// ReadWithIDs holds details about calls to the ReadWithIDs method.
		ReadWithIDs []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// T is the t argument value.
			T storage.DictionaryType
		}
		// Stats holds details about calls to the Stats method.
		Stats []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
	}
	lockAdd         sync.RWMutex
	lockDelete      sync.RWMutex
	lockRead        sync.RWMutex
	lockReadWithIDs sync.RWMutex
	lockStats       sync.RWMutex
}

// Add calls AddFunc.
func (mock *DictionaryMock) Add(ctx context.Context, t storage.DictionaryType, data string) error {
	if mock.AddFunc == nil {
		panic("DictionaryMock.AddFunc: method is nil but Dictionary.Add was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		T    storage.DictionaryType
		Data string
	}{
		Ctx:  ctx,
		T:    t,
		Data: data,
	}
	mock.lockAdd.Lock()
	mock.calls.Add = append(mock.calls.Add, callInfo)
	mock.lockAdd.Unlock()
	return mock.AddFunc(ctx, t, data)
}

// AddCalls gets all the calls that were made to Add.
// Check the length with:
//
//	len(mockedDictionary.AddCalls())
func (mock *DictionaryMock) AddCalls() []struct {
	Ctx  context.Context
	T    storage.DictionaryType
	Data string
} {
	var calls []struct {
		Ctx  context.Context
		T    storage.DictionaryType
		Data string
	}
	mock.lockAdd.RLock()
	calls = mock.calls.Add
	mock.lockAdd.RUnlock()
	return calls
}

// ResetAddCalls reset all the calls that were made to Add.
func (mock *DictionaryMock) ResetAddCalls() {
	mock.lockAdd.Lock()
	mock.calls.Add = nil
	mock.lockAdd.Unlock()
}

// Delete calls DeleteFunc.
func (mock *DictionaryMock) Delete(ctx context.Context, id int64) error {
	if mock.DeleteFunc == nil {
		panic("DictionaryMock.DeleteFunc: method is nil but Dictionary.Delete was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  int64
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	mock.lockDelete.Unlock()
	return mock.DeleteFunc(ctx, id)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//
//	len(mockedDictionary.DeleteCalls())
func (mock *DictionaryMock) DeleteCalls() []struct {
	Ctx context.Context
	ID  int64
} {
	var calls []struct {
		Ctx context.Context
		ID  int64
	}
	mock.lockDelete.RLock()
	calls = mock.calls.Delete
	mock.lockDelete.RUnlock()
	return calls
}

// ResetDeleteCalls reset all the calls that were made to Delete.
func (mock *DictionaryMock) ResetDeleteCalls() {
	mock.lockDelete.Lock()
	mock.calls.Delete = nil
	mock.lockDelete.Unlock()
}

// Read calls ReadFunc.
func (mock *DictionaryMock) Read(ctx context.Context, t storage.DictionaryType) ([]string, error) {
	if mock.ReadFunc == nil {
		panic("DictionaryMock.ReadFunc: method is nil but Dictionary.Read was just called")
	}
	callInfo := struct {
		Ctx context.Context
		T   storage.DictionaryType
	}{
		Ctx: ctx,
		T:   t,
	}
	mock.lockRead.Lock()
	mock.calls.Read = append(mock.calls.Read, callInfo)
	mock.lockRead.Unlock()
	return mock.ReadFunc(ctx, t)
}

// ReadCalls gets all the calls that were made to Read.
// Check the length with:
//
//	len(mockedDictionary.ReadCalls())
func (mock *DictionaryMock) ReadCalls() []struct {
	Ctx context.Context
	T   storage.DictionaryType
} {
	var calls []struct {
		Ctx context.Context
		T   storage.DictionaryType
	}
	mock.lockRead.RLock()
	calls = mock.calls.Read
	mock.lockRead.RUnlock()
	return calls
}

// ResetReadCalls reset all the calls that were made to Read.
func (mock *DictionaryMock) ResetReadCalls() {
	mock.lockRead.Lock()
	mock.calls.Read = nil
	mock.lockRead.Unlock()
}

// ReadWithIDs calls ReadWithIDsFunc.
func (mock *DictionaryMock) ReadWithIDs(ctx context.Context, t storage.DictionaryType) ([]storage.DictionaryEntry, error) {
	if mock.ReadWithIDsFunc == nil {
		panic("DictionaryMock.ReadWithIDsFunc: method is nil but Dictionary.ReadWithIDs was just called")
	}
	callInfo := struct {
		Ctx context.Context
		T   storage.DictionaryType
	}{
		Ctx: ctx,
		T:   t,
	}
	mock.lockReadWithIDs.Lock()
	mock.calls.ReadWithIDs = append(mock.calls.ReadWithIDs, callInfo)
	mock.lockReadWithIDs.Unlock()
	return mock.ReadWithIDsFunc(ctx, t)
}

// ReadWithIDsCalls gets all the calls that were made to ReadWithIDs.
// Check the length with:
//
//	len(mockedDictionary.ReadWithIDsCalls())
func (mock *DictionaryMock) ReadWithIDsCalls() []struct {
	Ctx context.Context
	T   storage.DictionaryType
} {
	var calls []struct {
		Ctx context.Context
		T   storage.DictionaryType
	}
	mock.lockReadWithIDs.RLock()
	calls = mock.calls.ReadWithIDs
	mock.lockReadWithIDs.RUnlock()
	return calls
}

// ResetReadWithIDsCalls reset all the calls that were made to ReadWithIDs.
func (mock *DictionaryMock) ResetReadWithIDsCalls() {
	mock.lockReadWithIDs.Lock()
	mock.calls.ReadWithIDs = nil
	mock.lockReadWithIDs.Unlock()
}

// Stats calls StatsFunc.
func (mock *DictionaryMock) Stats(ctx context.Context) (*storage.DictionaryStats, error) {
	if mock.StatsFunc == nil {
		panic("DictionaryMock.StatsFunc: method is nil but Dictionary.Stats was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockStats.Lock()
	mock.calls.Stats = append(mock.calls.Stats, callInfo)
	mock.lockStats.Unlock()
	return mock.StatsFunc(ctx)
}

// StatsCalls gets all the calls that were made to Stats.
// Check the length with:
//
//	len(mockedDictionary.StatsCalls())
func (mock *DictionaryMock) StatsCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockStats.RLock()
	calls = mock.calls.Stats
	mock.lockStats.RUnlock()
	return calls
}

// ResetStatsCalls reset all the calls that were made to Stats.
func (mock *DictionaryMock) ResetStatsCalls() {
	mock.lockStats.Lock()
	mock.calls.Stats = nil
	mock.lockStats.Unlock()
}

// ResetCalls reset all the calls that were made to all mocked methods.
func (mock *DictionaryMock) ResetCalls() {
	mock.lockAdd.Lock()
	mock.calls.Add = nil
	mock.lockAdd.Unlock()

	mock.lockDelete.Lock()
	mock.calls.Delete = nil
	mock.lockDelete.Unlock()

	mock.lockRead.Lock()
	mock.calls.Read = nil
	mock.lockRead.Unlock()

	mock.lockReadWithIDs.Lock()
	mock.calls.ReadWithIDs = nil
	mock.lockReadWithIDs.Unlock()

	mock.lockStats.Lock()
	mock.calls.Stats = nil
	mock.lockStats.Unlock()
}
