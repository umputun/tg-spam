// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"github.com/umputun/tg-spam/app/storage"
	"sync"
	"time"
)

// ReportsMock is a mock implementation of events.Reports.
//
//	func TestSomethingThatUsesReports(t *testing.T) {
//
//		// make and configure a mocked events.Reports
//		mockedReports := &ReportsMock{
//			AddFunc: func(ctx context.Context, report storage.Report) error {
//				panic("mock out the Add method")
//			},
//			DeleteByMessageFunc: func(ctx context.Context, msgID int, chatID int64) error {
//				panic("mock out the DeleteByMessage method")
//			},
//			DeleteReporterFunc: func(ctx context.Context, reporterID int64, msgID int, chatID int64) error {
//				panic("mock out the DeleteReporter method")
//			},
//			GetByMessageFunc: func(ctx context.Context, msgID int, chatID int64) ([]storage.Report, error) {
//				panic("mock out the GetByMessage method")
//			},
//			GetReporterCountSinceFunc: func(ctx context.Context, reporterID int64, since time.Time) (int, error) {
//				panic("mock out the GetReporterCountSince method")
//			},
//			UpdateAdminMsgIDFunc: func(ctx context.Context, msgID int, chatID int64, adminMsgID int) error {
//				panic("mock out the UpdateAdminMsgID method")
//			},
//		}
//
//		// use mockedReports in code that requires events.Reports
//		// and then make assertions.
//
//	}
type ReportsMock struct {
	// AddFunc mocks the Add method.
	AddFunc func(ctx context.Context, report storage.Report) error

	// DeleteByMessageFunc mocks the DeleteByMessage method.
	DeleteByMessageFunc func(ctx context.Context, msgID int, chatID int64) error

	// DeleteReporterFunc mocks the DeleteReporter method.
	DeleteReporterFunc func(ctx context.Context, reporterID int64, msgID int, chatID int64) error

	// GetByMessageFunc mocks the GetByMessage method.
	GetByMessageFunc func(ctx context.Context, msgID int, chatID int64) ([]storage.Report, error)

	// GetReporterCountSinceFunc mocks the GetReporterCountSince method.
	GetReporterCountSinceFunc func(ctx context.Context, reporterID int64, since time.Time) (int, error)

	// UpdateAdminMsgIDFunc mocks the UpdateAdminMsgID method.
	UpdateAdminMsgIDFunc func(ctx context.Context, msgID int, chatID int64, adminMsgID int) error

	// calls tracks calls to the methods.
	calls struct {
		// Add holds details about calls to the Add method.
		Add []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Report is the report argument value.
			Report storage.Report
		}
		// DeleteByMessage holds details about calls to the DeleteByMessage method.
		DeleteByMessage []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// MsgID is the msgID argument value.
			MsgID int
			// ChatID is the chatID argument value.
			ChatID int64
		}
		// DeleteReporter holds details about calls to the DeleteReporter method.
		DeleteReporter []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ReporterID is the reporterID argument value.
			ReporterID int64
			// MsgID is the msgID argument value.
			MsgID int
			// ChatID is the chatID argument value.
			ChatID int64
		}
		// GetByMessage holds details about calls to the GetByMessage method.
		GetByMessage []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// MsgID is the msgID argument value.
			MsgID int
			// ChatID is the chatID argument value.
			ChatID int64
		}
		// GetReporterCountSince holds details about calls to the GetReporterCountSince method.
		GetReporterCountSince []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ReporterID is the reporterID argument value.
			ReporterID int64
			// Since is the since argument value.
			Since time.Time
		}
		// UpdateAdminMsgID holds details about calls to the UpdateAdminMsgID method.
		UpdateAdminMsgID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// MsgID is the msgID argument value.
			MsgID int
			// ChatID is the chatID argument value.
			ChatID int64
			// AdminMsgID is the adminMsgID argument value.
			AdminMsgID int
		}
	}
	lockAdd                   sync.RWMutex
	lockDeleteByMessage       sync.RWMutex
	lockDeleteReporter        sync.RWMutex
	lockGetByMessage          sync.RWMutex
	lockGetReporterCountSince sync.RWMutex
	lockUpdateAdminMsgID      sync.RWMutex
}

// Add calls AddFunc.
func (mock *ReportsMock) Add(ctx context.Context, report storage.Report) error {
	if mock.AddFunc == nil {
		panic("ReportsMock.AddFunc: method is nil but Reports.Add was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Report storage.Report
	}{
		Ctx:    ctx,
		Report: report,
	}
	mock.lockAdd.Lock()
	mock.calls.Add = append(mock.calls.Add, callInfo)
	mock.lockAdd.Unlock()
	return mock.AddFunc(ctx, report)
}

// AddCalls gets all the calls that were made to Add.
// Check the length with:
//
//	len(mockedReports.AddCalls())
func (mock *ReportsMock) AddCalls() []struct {
	Ctx    context.Context
	Report storage.Report
} {
	var calls []struct {
		Ctx    context.Context
		Report storage.Report
	}
	mock.lockAdd.RLock()
	calls = mock.calls.Add
	mock.lockAdd.RUnlock()
	return calls
}

// ResetAddCalls reset all the calls that were made to Add.
func (mock *ReportsMock) ResetAddCalls() {
	mock.lockAdd.Lock()
	mock.calls.Add = nil
	mock.lockAdd.Unlock()
}

// DeleteByMessage calls DeleteByMessageFunc.
func (mock *ReportsMock) DeleteByMessage(ctx context.Context, msgID int, chatID int64) error {
	if mock.DeleteByMessageFunc == nil {
		panic("ReportsMock.DeleteByMessageFunc: method is nil but Reports.DeleteByMessage was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		MsgID  int
		ChatID int64
	}{
		Ctx:    ctx,
		MsgID:  msgID,
		ChatID: chatID,
	}
	mock.lockDeleteByMessage.Lock()
	mock.calls.DeleteByMessage = append(mock.calls.DeleteByMessage, callInfo)
	mock.lockDeleteByMessage.Unlock()
	return mock.DeleteByMessageFunc(ctx, msgID, chatID)
}

// DeleteByMessageCalls gets all the calls that were made to DeleteByMessage.
// Check the length with:
//
//	len(mockedReports.DeleteByMessageCalls())
func (mock *ReportsMock) DeleteByMessageCalls() []struct {
	Ctx    context.Context
	MsgID  int
	ChatID int64
} {
	var calls []struct {
		Ctx    context.Context
		MsgID  int
		ChatID int64
	}
	mock.lockDeleteByMessage.RLock()
	calls = mock.calls.DeleteByMessage
	mock.lockDeleteByMessage.RUnlock()
	return calls
}

// ResetDeleteByMessageCalls reset all the calls that were made to DeleteByMessage.
func (mock *ReportsMock) ResetDeleteByMessageCalls() {
	mock.lockDeleteByMessage.Lock()
	mock.calls.DeleteByMessage = nil
	mock.lockDeleteByMessage.Unlock()
}

// DeleteReporter calls DeleteReporterFunc.
func (mock *ReportsMock) DeleteReporter(ctx context.Context, reporterID int64, msgID int, chatID int64) error {
	if mock.DeleteReporterFunc == nil {
		panic("ReportsMock.DeleteReporterFunc: method is nil but Reports.DeleteReporter was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		ReporterID int64
		MsgID      int
		ChatID     int64
	}{
		Ctx:        ctx,
		ReporterID: reporterID,
		MsgID:      msgID,
		ChatID:     chatID,
	}
	mock.lockDeleteReporter.Lock()
	mock.calls.DeleteReporter = append(mock.calls.DeleteReporter, callInfo)
	mock.lockDeleteReporter.Unlock()
	return mock.DeleteReporterFunc(ctx, reporterID, msgID, chatID)
}

// DeleteReporterCalls gets all the calls that were made to DeleteReporter.
// Check the length with:
//
//	len(mockedReports.DeleteReporterCalls())
func (mock *ReportsMock) DeleteReporterCalls() []struct {
	Ctx        context.Context
	ReporterID int64
	MsgID      int
	ChatID     int64
} {
	var calls []struct {
		Ctx        context.Context
		ReporterID int64
		MsgID      int
		ChatID     int64
	}
	mock.lockDeleteReporter.RLock()
	calls = mock.calls.DeleteReporter
	mock.lockDeleteReporter.RUnlock()
	return calls
}

// ResetDeleteReporterCalls reset all the calls that were made to DeleteReporter.
func (mock *ReportsMock) ResetDeleteReporterCalls() {
	mock.lockDeleteReporter.Lock()
	mock.calls.DeleteReporter = nil
	mock.lockDeleteReporter.Unlock()
}

// GetByMessage calls GetByMessageFunc.
func (mock *ReportsMock) GetByMessage(ctx context.Context, msgID int, chatID int64) ([]storage.Report, error) {
	if mock.GetByMessageFunc == nil {
		panic("ReportsMock.GetByMessageFunc: method is nil but Reports.GetByMessage was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		MsgID  int
		ChatID int64
	}{
		Ctx:    ctx,
		MsgID:  msgID,
		ChatID: chatID,
	}
	mock.lockGetByMessage.Lock()
	mock.calls.GetByMessage = append(mock.calls.GetByMessage, callInfo)
	mock.lockGetByMessage.Unlock()
	return mock.GetByMessageFunc(ctx, msgID, chatID)
}

// GetByMessageCalls gets all the calls that were made to GetByMessage.
// Check the length with:
//
//	len(mockedReports.GetByMessageCalls())
func (mock *ReportsMock) GetByMessageCalls() []struct {
	Ctx    context.Context
	MsgID  int
	ChatID int64
} {
	var calls []struct {
		Ctx    context.Context
		MsgID  int
		ChatID int64
	}
	mock.lockGetByMessage.RLock()
	calls = mock.calls.GetByMessage
	mock.lockGetByMessage.RUnlock()
	return calls
}

// ResetGetByMessageCalls reset all the calls that were made to GetByMessage.
func (mock *ReportsMock) ResetGetByMessageCalls() {
	mock.lockGetByMessage.Lock()
	mock.calls.GetByMessage = nil
	mock.lockGetByMessage.Unlock()
}

// GetReporterCountSince calls GetReporterCountSinceFunc.
func (mock *ReportsMock) GetReporterCountSince(ctx context.Context, reporterID int64, since time.Time) (int, error) {
	if mock.GetReporterCountSinceFunc == nil {
		panic("ReportsMock.GetReporterCountSinceFunc: method is nil but Reports.GetReporterCountSince was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		ReporterID int64
		Since      time.Time
	}{
		Ctx:        ctx,
		ReporterID: reporterID,
		Since:      since,
	}
	mock.lockGetReporterCountSince.Lock()
	mock.calls.GetReporterCountSince = append(mock.calls.GetReporterCountSince, callInfo)
	mock.lockGetReporterCountSince.Unlock()
	return mock.GetReporterCountSinceFunc(ctx, reporterID, since)
}

// GetReporterCountSinceCalls gets all the calls that were made to GetReporterCountSince.
// Check the length with:
//
//	len(mockedReports.GetReporterCountSinceCalls())
func (mock *ReportsMock) GetReporterCountSinceCalls() []struct {
	Ctx        context.Context
	ReporterID int64
	Since      time.Time
} {
	var calls []struct {
		Ctx        context.Context
		ReporterID int64
		Since      time.Time
	}
	mock.lockGetReporterCountSince.RLock()
	calls = mock.calls.GetReporterCountSince
	mock.lockGetReporterCountSince.RUnlock()
	return calls
}

// ResetGetReporterCountSinceCalls reset all the calls that were made to GetReporterCountSince.
func (mock *ReportsMock) ResetGetReporterCountSinceCalls() {
	mock.lockGetReporterCountSince.Lock()
	mock.calls.GetReporterCountSince = nil
	mock.lockGetReporterCountSince.Unlock()
}

// UpdateAdminMsgID calls UpdateAdminMsgIDFunc.
func (mock *ReportsMock) UpdateAdminMsgID(ctx context.Context, msgID int, chatID int64, adminMsgID int) error {
	if mock.UpdateAdminMsgIDFunc == nil {
		panic("ReportsMock.UpdateAdminMsgIDFunc: method is nil but Reports.UpdateAdminMsgID was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		MsgID      int
		ChatID     int64
		AdminMsgID int
	}{
		Ctx:        ctx,
		MsgID:      msgID,
		ChatID:     chatID,
		AdminMsgID: adminMsgID,
	}
	mock.lockUpdateAdminMsgID.Lock()
	mock.calls.UpdateAdminMsgID = append(mock.calls.UpdateAdminMsgID, callInfo)
	mock.lockUpdateAdminMsgID.Unlock()
	return mock.UpdateAdminMsgIDFunc(ctx, msgID, chatID, adminMsgID)
}

// UpdateAdminMsgIDCalls gets all the calls that were made to UpdateAdminMsgID.
// Check the length with:
//
//	len(mockedReports.UpdateAdminMsgIDCalls())
func (mock *ReportsMock) UpdateAdminMsgIDCalls() []struct {
	Ctx        context.Context
	MsgID      int
	ChatID     int64
	AdminMsgID int
} {
	var calls []struct {
		Ctx        context.Context
		MsgID      int
		ChatID     int64
		AdminMsgID int
	}
	mock.lockUpdateAdminMsgID.RLock()
	calls = mock.calls.UpdateAdminMsgID
	mock.lockUpdateAdminMsgID.RUnlock()
	return calls
}

// ResetUpdateAdminMsgIDCalls reset all the calls that were made to UpdateAdminMsgID.
func (mock *ReportsMock) ResetUpdateAdminMsgIDCalls() {
	mock.lockUpdateAdminMsgID.Lock()
	mock.calls.UpdateAdminMsgID = nil
	mock.lockUpdateAdminMsgID.Unlock()
}

// ResetCalls reset all the calls that were made to all mocked methods.
func (mock *ReportsMock) ResetCalls() {
	mock.lockAdd.Lock()
	mock.calls.Add = nil
	mock.lockAdd.Unlock()

	mock.lockDeleteByMessage.Lock()
	mock.calls.DeleteByMessage = nil
	mock.lockDeleteByMessage.Unlock()

	mock.lockDeleteReporter.Lock()
	mock.calls.DeleteReporter = nil
	mock.lockDeleteReporter.Unlock()

	mock.lockGetByMessage.Lock()
	mock.calls.GetByMessage = nil
	mock.lockGetByMessage.Unlock()

	mock.lockGetReporterCountSince.Lock()
	mock.calls.GetReporterCountSince = nil
	mock.lockGetReporterCountSince.Unlock()

	mock.lockUpdateAdminMsgID.Lock()
	mock.calls.UpdateAdminMsgID = nil
	mock.lockUpdateAdminMsgID.Unlock()
}
